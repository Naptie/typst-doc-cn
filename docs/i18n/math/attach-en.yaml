route: /docs/reference/math/attach/
title: Attach
description: Documentation for attach group of functions.
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: attach
  name: Attachment
  children:
  - id: attach-example
    name: Example
    children: []
  - id: attach-syntax
    name: Syntax
    children: []
  - id: attach-parameters
    name: Parameters
    children:
    - id: attach-parameters-base
      name: base
      children: []
    - id: attach-parameters-t
      name: t
      children: []
    - id: attach-parameters-b
      name: b
      children: []
    - id: attach-parameters-tl
      name: tl
      children: []
    - id: attach-parameters-bl
      name: bl
      children: []
    - id: attach-parameters-tr
      name: tr
      children: []
    - id: attach-parameters-br
      name: br
      children: []
- id: scripts
  name: Scripts
  children:
  - id: scripts-example
    name: Example
    children: []
  - id: scripts-parameters
    name: Parameters
    children:
    - id: scripts-parameters-body
      name: body
      children: []
- id: limits
  name: Limits
  children:
  - id: limits-example
    name: Example
    children: []
  - id: limits-parameters
    name: Parameters
    children:
    - id: limits-parameters-body
      name: body
      children: []
    - id: limits-parameters-inline
      name: inline
      children: []
body:
  kind: funcs
  content:
    name: attach
    display: Attach
    details: |-
      <p>Subscript, superscripts, and limits.</p>
      <p>The <code>attach</code> function backs the <code><span class="typ-math-delim">$</span>a<span class="typ-math-op">_</span>b<span class="typ-math-op">^</span>c<span class="typ-math-delim">$</span></code> syntax that adds top and bottom
      attachments to a part of an equation. Attachments can be displayed either as
      sub/superscripts, or limits. Typst automatically decides which is more
      suitable depending on the base, but you can also control this manually with
      the <code>scripts</code> and <code>limits</code> functions.</p>
    functions:
    - path:
      - attach
      display: Attachment
      keywords: null
      oneliner: A base with optional attachments.
      element: true
      details: |-
        <p>A base with optional attachments.</p>
        <h3 id="attach-example">Example</h3>
        <div class="previewed-code"><pre><code><span class="typ-comment">// With syntax.</span>
        <span class="typ-math-delim">$</span> <span class="typ-pol">sum</span><span class="typ-math-op">_</span><span class="typ-punct">(</span>i=0<span class="typ-punct">)</span><span class="typ-math-op">^</span>n a<span class="typ-math-op">_</span>i = 2<span class="typ-math-op">^</span><span class="typ-punct">(</span>1+i<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>

        <span class="typ-comment">// With function call.</span>
        <span class="typ-math-delim">$</span> <span class="typ-func">attach</span><span class="typ-punct">(</span>
          <span class="typ-pol">Pi</span><span class="typ-punct">,</span> t<span class="typ-punct">:</span> <span class="typ-pol">alpha</span><span class="typ-punct">,</span> b<span class="typ-punct">:</span> <span class="typ-pol">beta</span><span class="typ-punct">,</span>
          tl<span class="typ-punct">:</span> 1<span class="typ-punct">,</span> tr<span class="typ-punct">:</span> 2+3<span class="typ-punct">,</span> bl<span class="typ-punct">:</span> 4+5<span class="typ-punct">,</span> br<span class="typ-punct">:</span> 6<span class="typ-punct">,</span>
        <span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/c5ec897569c2232d0f7d6902f6452215.png" alt="Preview" width="480" height="190"/></div></div>
        <h3 id="attach-syntax">Syntax</h3>
        <p>This function also has dedicated syntax for attachments after the base: Use
        the underscore (<code>_</code>) to indicate a subscript i.e. bottom attachment and the
        hat (<code>^</code>) to indicate a superscript i.e. top attachment.</p>
      params:
      - name: base
        details: <p>The base to which things are attached.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: t
        details: |-
          <p>The top attachment, smartly positioned at top-right or above the base.</p>
          <p>You can wrap the base in <code><span class="typ-func">limits</span><span class="typ-punct">(</span><span class="typ-punct">)</span></code> or <code><span class="typ-func">scripts</span><span class="typ-punct">(</span><span class="typ-punct">)</span></code> to override the
          smart positioning.</p>
        example: null
        types:
        - none
        - content
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: b
        details: |-
          <p>The bottom attachment, smartly positioned at the bottom-right or below
          the base.</p>
          <p>You can wrap the base in <code><span class="typ-func">limits</span><span class="typ-punct">(</span><span class="typ-punct">)</span></code> or <code><span class="typ-func">scripts</span><span class="typ-punct">(</span><span class="typ-punct">)</span></code> to override the
          smart positioning.</p>
        example: null
        types:
        - none
        - content
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: tl
        details: <p>The top-left attachment (before the base).</p>
        example: null
        types:
        - none
        - content
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: bl
        details: <p>The bottom-left attachment (before base).</p>
        example: null
        types:
        - none
        - content
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: tr
        details: <p>The top-right attachment (after the base).</p>
        example: null
        types:
        - none
        - content
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: br
        details: <p>The bottom-right attachment (after the base).</p>
        example: null
        types:
        - none
        - content
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      returns:
      - content
      methods: []
      scope: []
    - path:
      - scripts
      display: Scripts
      keywords: null
      oneliner: Forces a base to display attachments as scripts.
      element: true
      details: |-
        <p>Forces a base to display attachments as scripts.</p>
        <h3 id="scripts-example">Example</h3>
        <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">scripts</span><span class="typ-punct">(</span><span class="typ-pol">sum</span><span class="typ-punct">)</span><span class="typ-math-op">_</span>1<span class="typ-math-op">^</span>2 <span class="typ-escape">!=</span> <span class="typ-pol">sum</span><span class="typ-math-op">_</span>1<span class="typ-math-op">^</span>2 <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/fd2fa3481f1f6d8947d1a6310cd5e827.png" alt="Preview" width="480" height="190"/></div></div>
      params:
      - name: body
        details: <p>The base to attach the scripts to.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      methods: []
      scope: []
    - path:
      - limits
      display: Limits
      keywords: null
      oneliner: Forces a base to display attachments as limits.
      element: true
      details: |-
        <p>Forces a base to display attachments as limits.</p>
        <h3 id="limits-example">Example</h3>
        <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">limits</span><span class="typ-punct">(</span>A<span class="typ-punct">)</span><span class="typ-math-op">_</span>1<span class="typ-math-op">^</span>2 <span class="typ-escape">!=</span> A<span class="typ-math-op">_</span>1<span class="typ-math-op">^</span>2 <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/a60dcf87b7850ffbb2f702c04761242c.png" alt="Preview" width="480" height="190"/></div></div>
      params:
      - name: body
        details: <p>The base to attach the limits to.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: inline
        details: |-
          <p>Whether to also force limits in inline equations.</p>
          <p>When applying limits globally (e.g., through a show rule), it is
          typically a good idea to disable this.</p>
        example: null
        types:
        - boolean
        strings: []
        default: <code><span class="typ-key">true</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      returns:
      - content
      methods: []
      scope: []
children: []
