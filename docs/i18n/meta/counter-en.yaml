route: /docs/reference/meta/counter/
title: Counter
description: Documentation for the `counter` function.
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: displaying
  name: Displaying
  children: []
- id: modifying
  name: Modifying
  children: []
- id: custom-counters
  name: Custom Counters
  children: []
- id: how-to-step
  name: How To Step
  children: []
- id: page-counter
  name: Page Counter
  children: []
- id: time-travel
  name: Time Travel
  children: []
- id: other-state
  name: Other State
  children: []
- id: parameters
  name: Parameters
  children:
  - id: parameters-key
    name: key
    children: []
- id: methods
  name: Methods
  children:
  - id: methods-display
    name: display
    children:
    - id: methods-display-parameters-numbering
      name: numbering
      children: []
    - id: methods-display-parameters-both
      name: both
      children: []
  - id: methods-step
    name: step
    children:
    - id: methods-step-parameters-level
      name: level
      children: []
  - id: methods-update
    name: update
    children:
    - id: methods-update-parameters-value
      name: value
      children: []
  - id: methods-at
    name: at
    children:
    - id: methods-at-parameters-location
      name: location
      children: []
  - id: methods-final
    name: final
    children:
    - id: methods-final-parameters-location
      name: location
      children: []
body:
  kind: func
  content:
    path:
    - counter
    display: Counter
    keywords: null
    oneliner: Counts through pages, elements, and more.
    element: false
    details: |-
      <p>Counts through pages, elements, and more.</p>
      <p>With the counter function, you can access and modify counters for pages,
      headings, figures, and more. Moreover, you can define custom counters for
      other things you want to count.</p>
      <h2 id="displaying">Displaying a counter</h2>
      <p>To display the current value of the heading counter, you call the <code>counter</code>
      function with the <code>key</code> set to <code>heading</code> and then call the <code>display</code> method
      on the counter. To see any output, you also have to enable heading
      <a href="/docs/reference/meta/heading/#parameters-numbering">numbering</a>.</p>
      <p>The <code>display</code> method optionally takes an argument telling it how to format
      the counter. This can be a <a href="/docs/reference/meta/numbering/">numbering pattern or a
      function</a>.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">heading</span><span class="typ-punct">(</span>numbering<span class="typ-punct">:</span> <span class="typ-str">&quot;1.&quot;</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Introduction</span>
      Some text here.

      <span class="typ-heading">= Background</span>
      The current value is:
      <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span>

      Or in roman numerals:
      <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-str">&quot;I&quot;</span><span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/3c91f06c6e12011f1262a3edaf9de993.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="modifying">Modifying a counter</h2>
      <p>To modify a counter, you can use the <code>step</code> and <code>update</code> methods:</p>
      <ul>
      <li>
      <p>The <code>step</code> method increases the value of the counter by one. Because
      counters can have multiple levels (in the case of headings for sections,
      subsections, and so on), the <code>step</code> method optionally takes a <code>level</code>
      argument. If given, the counter steps at the given depth.</p>
      </li>
      <li>
      <p>The <code>update</code> method allows you to arbitrarily modify the counter. In its
      basic form, you give it an integer (or multiple for multiple levels). For
      more flexibility, you can instead also give it a function that gets the
      current value and returns a new value.</p>
      </li>
      </ul>
      <p>The heading counter is stepped before the heading is displayed, so
      <code>Analysis</code> gets the number seven even though the counter is at six after the
      second update.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">heading</span><span class="typ-punct">(</span>numbering<span class="typ-punct">:</span> <span class="typ-str">&quot;1.&quot;</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Introduction</span>
      <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Background</span>
      <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span><span class="typ-num">3</span><span class="typ-punct">)</span>
      <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span>n <span class="typ-op">=&gt;</span> n <span class="typ-op">*</span> <span class="typ-num">2</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Analysis</span>
      Let&#39;s skip 7.1.
      <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span>level<span class="typ-punct">:</span> <span class="typ-num">2</span><span class="typ-punct">)</span>

      <span class="typ-heading">== Analysis</span>
      Still at <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span>.
      </code></pre><div class="preview"><img src="/assets/docs/dc3be507febcfa78e096b4d4eb924e01.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="custom-counters">Custom counters</h2>
      <p>To define your own counter, call the <code>counter</code> function with a string as a
      key. This key identifies the counter globally.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> mine <span class="typ-op">=</span> <span class="typ-func">counter</span><span class="typ-punct">(</span><span class="typ-str">&quot;mycounter&quot;</span><span class="typ-punct">)</span>
      <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
      <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span>c <span class="typ-op">=&gt;</span> c <span class="typ-op">*</span> <span class="typ-num">3</span><span class="typ-punct">)</span>
      <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      </code></pre><div class="preview"><img src="/assets/docs/8d57dcf6f8381bff15ee2ff13bf8bc91.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="how-to-step">How to step</h2>
      <p>When you define and use a custom counter, in general, you should first step
      the counter and then display it. This way, the stepping behaviour of a
      counter can depend on the element it is stepped for. If you were writing a
      counter for, let's say, theorems, your theorem's definition would thus first
      include the counter step and only then display the counter and the theorem's
      contents.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> c <span class="typ-op">=</span> <span class="typ-func">counter</span><span class="typ-punct">(</span><span class="typ-str">&quot;theorem&quot;</span><span class="typ-punct">)</span>
      <span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">theorem</span><span class="typ-punct">(</span>it<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-func">block</span><span class="typ-punct">[</span>
        <span class="typ-pol">#</span><span class="typ-pol">c</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
        <span class="typ-strong">*Theorem <span class="typ-pol">#</span><span class="typ-pol">c</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span>:*</span> <span class="typ-pol">#</span><span class="typ-pol">it</span>
      <span class="typ-punct">]</span>

      <span class="typ-func">#</span><span class="typ-func">theorem</span><span class="typ-punct">[</span><span class="typ-math-delim">$</span>1 = 1<span class="typ-math-delim">$</span><span class="typ-punct">]</span>
      <span class="typ-func">#</span><span class="typ-func">theorem</span><span class="typ-punct">[</span><span class="typ-math-delim">$</span>2 &lt; 3<span class="typ-math-delim">$</span><span class="typ-punct">]</span>
      </code></pre><div class="preview"><img src="/assets/docs/b97977cf07ea730ac9e00f19761bd36c.png" alt="Preview" width="480" height="190"/></div></div>
      <p>The rationale behind this is best explained on the example of the heading
      counter: An update to the heading counter depends on the heading's level.
      By stepping directly before the heading, we can correctly step from <code>1</code> to
      <code>1.1</code> when encountering a level 2 heading. If we were to step after the
      heading, we wouldn't know what to step to.</p>
      <p>Because counters should always be stepped before the elements they count,
      they always start at zero. This way, they are at one for the first display
      (which happens after the first step).</p>
      <h2 id="page-counter">Page counter</h2>
      <p>The page counter is special. It is automatically stepped at each pagebreak.
      But like other counters, you can also step it manually. For example, you
      could have Roman page numbers for your preface, then switch to Arabic page
      numbers for your main content and reset the page counter to one.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">page</span><span class="typ-punct">(</span>numbering<span class="typ-punct">:</span> <span class="typ-str">&quot;(i)&quot;</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Preface</span>
      The preface is numbered with
      roman numerals.

      <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">page</span><span class="typ-punct">(</span>numbering<span class="typ-punct">:</span> <span class="typ-str">&quot;1 / 1&quot;</span><span class="typ-punct">)</span>
      <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>page<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Main text</span>
      Here, the counter is reset to one.
      We also display both the current
      page and total number of pages in
      Arabic numbers.
      </code></pre><div class="preview"><img src="/assets/docs/6e042ee9b3964a4ce84bb21b9ca876e8.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="time-travel">Time travel</h2>
      <p>Counters can travel through time! You can find out the final value of the
      counter before it is reached and even determine what the value was at any
      particular location in the document.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> mine <span class="typ-op">=</span> <span class="typ-func">counter</span><span class="typ-punct">(</span><span class="typ-str">&quot;mycounter&quot;</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Values</span>
      <span class="typ-func">#</span><span class="typ-func">locate</span><span class="typ-punct">(</span>loc <span class="typ-op">=&gt;</span> <span class="typ-punct">{</span>
        <span class="typ-key">let</span> start-val <span class="typ-op">=</span> mine<span class="typ-punct">.</span><span class="typ-func">at</span><span class="typ-punct">(</span>loc<span class="typ-punct">)</span>
        <span class="typ-key">let</span> elements <span class="typ-op">=</span> <span class="typ-func">query</span><span class="typ-punct">(</span><span class="typ-label">&lt;intro&gt;</span><span class="typ-punct">,</span> loc<span class="typ-punct">)</span>
        <span class="typ-key">let</span> intro-val <span class="typ-op">=</span> mine<span class="typ-punct">.</span><span class="typ-func">at</span><span class="typ-punct">(</span>
          elements<span class="typ-punct">.</span><span class="typ-func">first</span><span class="typ-punct">(</span><span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">location</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
        <span class="typ-punct">)</span>
        <span class="typ-key">let</span> final-val <span class="typ-op">=</span> mine<span class="typ-punct">.</span><span class="typ-func">final</span><span class="typ-punct">(</span>loc<span class="typ-punct">)</span>
        <span class="typ-punct">[</span>Starts as: <span class="typ-pol">#</span><span class="typ-pol">start-val</span> <span class="typ-escape">\</span>
         Value at intro is: <span class="typ-pol">#</span><span class="typ-pol">intro-val</span> <span class="typ-escape">\</span>
         Final value is: <span class="typ-pol">#</span><span class="typ-pol">final-val</span> <span class="typ-escape">\</span> <span class="typ-punct">]</span>
      <span class="typ-punct">}</span><span class="typ-punct">)</span>

      <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span>n <span class="typ-op">=&gt;</span> n <span class="typ-op">+</span> <span class="typ-num">3</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Introduction</span> <span class="typ-label">&lt;intro&gt;</span>
      <span class="typ-func">#</span><span class="typ-func">lorem</span><span class="typ-punct">(</span><span class="typ-num">10</span><span class="typ-punct">)</span>

      <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
      <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/2bb4fadda762ecd725b12fa5c261cb7a.png" alt="Preview" width="480" height="190"/></div></div>
      <p>Let's dissect what happens in the example above:</p>
      <ul>
      <li>
      <p>We call <a href="/docs/reference/meta/locate/"><code>locate</code></a> to get access to the current location in
      the document. We then pass this location to our counter's <code>at</code> method to
      get its value at the current location. The <code>at</code> method always returns an
      array because counters can have multiple levels. As the counter starts at
      one, the first value is thus <code><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span><span class="typ-punct">)</span></code>.</p>
      </li>
      <li>
      <p>We now <a href="/docs/reference/meta/query/"><code>query</code></a> the document for all elements with the
      <code><span class="typ-label">&lt;intro&gt;</span></code> label. The result is an array from which we extract the first
      (and only) element's <a href="/docs/reference/types/content/#methods-location">location</a>. We then look up
      the value of the counter at that location. The first update to the counter
      sets it to <code><span class="typ-num">1</span> <span class="typ-op">+</span> <span class="typ-num">3</span> <span class="typ-op">=</span> <span class="typ-num">4</span></code>. At the introduction heading, the value is thus
      <code><span class="typ-punct">(</span><span class="typ-num">4</span><span class="typ-punct">,</span><span class="typ-punct">)</span></code>.</p>
      </li>
      <li>
      <p>Last but not least, we call the <code>final</code> method on the counter. It tells us
      what the counter's value will be at the end of the document. We also need
      to give it a location to prove that we are inside of a <code>locate</code> call, but
      which one doesn't matter. After the heading follow two calls to <code>step()</code>,
      so the final value is <code><span class="typ-punct">(</span><span class="typ-num">6</span><span class="typ-punct">,</span><span class="typ-punct">)</span></code>.</p>
      </li>
      </ul>
      <h2 id="other-state">Other kinds of state</h2>
      <p>The <code>counter</code> function is closely related to <a href="/docs/reference/meta/state/">state</a> function.
      Read its documentation for more details on state management in Typst and
      why it doesn't just use normal variables for counters.</p>
    params:
    - name: key
      details: |-
        <p>The key that identifies this counter.</p>
        <ul>
        <li>If it is a string, creates a custom counter that is only affected by
        manual updates,</li>
        <li>If this is a <code><span class="typ-label">&lt;label&gt;</span></code>, counts through all elements with that label,</li>
        <li>If this is an element function or selector, counts through its elements,</li>
        <li>If this is the <a href="/docs/reference/layout/page/"><code>page</code></a> function, counts through pages.</li>
        </ul>
      example: null
      types:
      - string
      - label
      - function
      - selector
      strings: []
      default: null
      positional: true
      named: false
      required: true
      variadic: false
      settable: false
    returns:
    - counter
    methods:
    - name: display
      details: <p>Displays the value of the counter.</p>
      params:
      - name: numbering
        details: |-
          <p>A <a href="/docs/reference/meta/numbering/">numbering pattern or a function</a>, which specifies how
          to display the counter. If given a function, that function receives each
          number of the counter as a separate argument. If the amount of numbers
          varies, e.g. for the heading argument, you can use an
          <a href="/docs/reference/types/arguments/">argument sink</a>.</p>
          <p>If this is omitted, displays the counter with the numbering style for the
          counted element or with the pattern <code><span class="typ-str">&quot;1.1&quot;</span></code> if no such style exists.</p>
        example: null
        types:
        - string
        - function
        strings: []
        default: null
        positional: true
        named: false
        required: false
        variadic: false
        settable: false
      - name: both
        details: |-
          <p>If enabled, displays the current and final top-level count together. Both
          can be styled through a single numbering pattern. This is used by the page
          numbering property to display the current and total number of pages when a
          pattern like <code><span class="typ-str">&quot;1 / 1&quot;</span></code> is given.</p>
        example: null
        types:
        - boolean
        strings: []
        default: null
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - content
    - name: step
      details: |-
        <p>Increases the value of the counter by one.</p>
        <p>The update will be in effect at the position where the returned content is
        inserted into the document. If you don't put the output into the document,
        nothing happens! This would be the case, for example, if you write
        <code><span class="typ-key">let</span> _ <span class="typ-op">=</span> <span class="typ-func">counter</span><span class="typ-punct">(</span>page<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span></code>. Counter updates are always applied in
        layout order and in that case, Typst wouldn't know when to step the counter.</p>
      params:
      - name: level
        details: <p>The depth at which to step the counter. Defaults to <code><span
          class="typ-num">1</span></code>.</p>
        example: null
        types:
        - integer
        strings: []
        default: null
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - content
    - name: update
      details: |-
        <p>Updates the value of the counter.</p>
        <p>Just like with <code>step</code>, the update only occurs if you put the resulting
        content into the document.</p>
      params:
      - name: value
        details: |-
          <p>If given an integer or array of integers, sets the counter to that value.
          If given a function, that function receives the previous counter value
          (with each number as a separate argument) and has to return the new
          value (integer or array).</p>
        example: null
        types:
        - integer
        - array
        - function
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
    - name: at
      details: |-
        <p>Gets the value of the counter at the given location. Always returns an
        array of integers, even if the counter has just one number.</p>
      params:
      - name: location
        details: |-
          <p>The location at which the counter value should be retrieved. A suitable
          location can be retrieved from <a href="/docs/reference/meta/locate/"><code>locate</code></a> or
          <a href="/docs/reference/meta/query/"><code>query</code></a>.</p>
        example: null
        types:
        - location
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - array
    - name: final
      details: |-
        <p>Gets the value of the counter at the end of the document. Always returns an
        array of integers, even if the counter has just one number.</p>
      params:
      - name: location
        details: |-
          <p>Can be any location. Why is it required then? Typst has to evaluate parts
          of your code multiple times to determine all counter values. By only
          allowing this method within <a href="/docs/reference/meta/locate/"><code>locate</code></a> calls, the amount of
          code that can depend on the method's result is reduced. If you could call
          <code>final</code> directly at the top level of a module, the evaluation of the whole
          module and its exports could depend on the counter's value.</p>
        example: null
        types:
        - location
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - array
    scope: []
children: []
