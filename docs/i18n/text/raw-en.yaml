route: /docs/reference/text/raw/
title: Raw Text / Code
description: Documentation for the `raw` function.
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: example
  name: Example
  children: []
- id: syntax
  name: Syntax
  children: []
- id: parameters
  name: Parameters
  children:
  - id: parameters-text
    name: text
    children: []
  - id: parameters-block
    name: block
    children: []
  - id: parameters-lang
    name: lang
    children: []
  - id: parameters-align
    name: align
    children: []
body:
  kind: func
  content:
    path:
    - raw
    display: Raw Text / Code
    keywords: null
    oneliner: Raw text with optional syntax highlighting.
    element: true
    details: |-
      <p>Raw text with optional syntax highlighting.</p>
      <p>Displays the text verbatim and in a monospace font. This is typically used
      to embed computer code into your document.</p>
      <h2 id="example">Example</h2>
      <div class="previewed-code"><pre><code>Adding <span class="typ-raw">`rbx`</span> to <span class="typ-raw">`rcx`</span> gives
      the desired result.

      <span class="typ-raw">```rust
      fn main() {
          println!(&quot;Hello World!&quot;);
      }
      ```</span>
      </code></pre><div class="preview"><img src="/assets/docs/9311ccec6969c23387e7d99cb4baba55.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="syntax">Syntax</h2>
      <p>This function also has dedicated syntax. You can enclose text in 1 or 3+
      backticks (<code>`</code>) to make it raw. Two backticks produce empty raw text.
      When you use three or more backticks, you can additionally specify a
      language tag for syntax highlighting directly after the opening backticks.
      Within raw blocks, everything is rendered as is, in particular, there are no
      escape sequences.</p>
    params:
    - name: text
      details: |-
        <p>The raw text.</p>
        <p>You can also use raw blocks creatively to create custom syntaxes for
        your automations.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-comment">// Parse numbers in raw blocks with the</span>
        <span class="typ-comment">// `mydsl` tag and sum them up.</span>
        <span class="typ-key">#</span><span class="typ-key">show</span> raw<span class="typ-punct">.</span><span class="typ-func">where</span><span class="typ-punct">(</span>lang<span class="typ-punct">:</span> <span class="typ-str">&quot;mydsl&quot;</span><span class="typ-punct">)</span><span class="typ-punct">:</span> it <span class="typ-op">=&gt;</span> <span class="typ-punct">{</span>
          <span class="typ-key">let</span> sum <span class="typ-op">=</span> <span class="typ-num">0</span>
          <span class="typ-key">for</span> part <span class="typ-key">in</span> it<span class="typ-punct">.</span>text<span class="typ-punct">.</span><span class="typ-func">split</span><span class="typ-punct">(</span><span class="typ-str">&quot;+&quot;</span><span class="typ-punct">)</span> <span class="typ-punct">{</span>
            sum <span class="typ-op">+=</span> <span class="typ-func">int</span><span class="typ-punct">(</span>part<span class="typ-punct">.</span><span class="typ-func">trim</span><span class="typ-punct">(</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          <span class="typ-punct">}</span>
          sum
        <span class="typ-punct">}</span>

        <span class="typ-raw">```mydsl
        1 + 2 + 3 + 4 + 5
        ```</span>
        </code></pre><div class="preview"><img src="/assets/docs/bde85482e73ea5451d489ec50b6d23ba.png" alt="Preview" width="480" height="190"/></div></div>
      types:
      - string
      strings: []
      default: null
      positional: true
      named: false
      required: true
      variadic: false
      settable: false
    - name: block
      details: |-
        <p>Whether the raw text is displayed as a separate block.</p>
        <p>In markup mode, using one-backtick notation makes this <code><span class="typ-key">false</span></code>,
        whereas using three-backtick notation makes it <code><span class="typ-key">true</span></code>.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-comment">// Display inline code in a small box</span>
        <span class="typ-comment">// that retains the correct baseline.</span>
        <span class="typ-key">#</span><span class="typ-key">show</span> raw<span class="typ-punct">.</span><span class="typ-func">where</span><span class="typ-punct">(</span>block<span class="typ-punct">:</span> <span class="typ-key">false</span><span class="typ-punct">)</span><span class="typ-punct">:</span> box<span class="typ-punct">.</span><span class="typ-func">with</span><span class="typ-punct">(</span>
          fill<span class="typ-punct">:</span> <span class="typ-func">luma</span><span class="typ-punct">(</span><span class="typ-num">240</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          inset<span class="typ-punct">:</span> <span class="typ-punct">(</span>x<span class="typ-punct">:</span> <span class="typ-num">3pt</span><span class="typ-punct">,</span> y<span class="typ-punct">:</span> <span class="typ-num">0pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          outset<span class="typ-punct">:</span> <span class="typ-punct">(</span>y<span class="typ-punct">:</span> <span class="typ-num">3pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          radius<span class="typ-punct">:</span> <span class="typ-num">2pt</span><span class="typ-punct">,</span>
        <span class="typ-punct">)</span>

        <span class="typ-comment">// Display block code in a larger block</span>
        <span class="typ-comment">// with more padding.</span>
        <span class="typ-key">#</span><span class="typ-key">show</span> raw<span class="typ-punct">.</span><span class="typ-func">where</span><span class="typ-punct">(</span>block<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">)</span><span class="typ-punct">:</span> block<span class="typ-punct">.</span><span class="typ-func">with</span><span class="typ-punct">(</span>
          fill<span class="typ-punct">:</span> <span class="typ-func">luma</span><span class="typ-punct">(</span><span class="typ-num">240</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          inset<span class="typ-punct">:</span> <span class="typ-num">10pt</span><span class="typ-punct">,</span>
          radius<span class="typ-punct">:</span> <span class="typ-num">4pt</span><span class="typ-punct">,</span>
        <span class="typ-punct">)</span>

        With <span class="typ-raw">`rg`</span>, you can search through your files quickly.

        <span class="typ-raw">```bash
        rg &quot;Hello World&quot;
        ```</span>
        </code></pre><div class="preview"><img src="/assets/docs/a8ab63a7c28ae5f0a9100c28126e854f.png" alt="Preview" width="480" height="190"/></div></div>
      types:
      - boolean
      strings: []
      default: <code><span class="typ-key">false</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: lang
      details: |-
        <p>The language to syntax-highlight in.</p>
        <p>Apart from typical language tags known from Markdown, this supports the
        <code><span class="typ-str">&quot;typ&quot;</span></code> and <code><span class="typ-str">&quot;typc&quot;</span></code> tags for Typst markup and Typst code,
        respectively.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-raw">```typ
        This is *Typst!*
        ```</span>
        </code></pre><div class="preview"><img src="/assets/docs/22a1b8ba38fa3f2b7158354d4b0b1e28.png" alt="Preview" width="480" height="190"/></div></div>
      types:
      - none
      - string
      strings: []
      default: <code><span class="typ-key">none</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: align
      details: |-
        <p>The horizontal alignment that each line in a raw block should have.
        This option is ignored if this is not a raw block (if specified
        <code>block: false</code> or single backticks were used in markup mode).</p>
        <p>By default, this is set to <code>start</code>, meaning that raw text is
        aligned towards the start of the text direction inside the block
        by default, regardless of the current context's alignment (allowing
        you to center the raw block itself without centering the text inside
        it, for example).</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">raw</span><span class="typ-punct">(</span>align<span class="typ-punct">:</span> center<span class="typ-punct">)</span>

        <span class="typ-raw">```typc
        let f(x) = x
        code = &quot;centered&quot;
        ```</span>
        </code></pre><div class="preview"><img src="/assets/docs/3329ad5b36132aa190d787eb5927b1aa.png" alt="Preview" width="480" height="190"/></div></div>
      types:
      - alignment
      strings: []
      default: <code>start</code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    returns:
    - content
    methods: []
    scope: []
children: []
