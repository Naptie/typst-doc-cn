# Descriptions of the documentation categories.

foundations: |
  基本类型和函数.

  在这里，你可以找到基本数据类型的文档，如 [integers]($int) 和
  [strings]($int)，以及关于核心计算函数的详细信息。

text: |
  文本排版。

  尤其有趣的是 [text 函数]($text)。

math: |
  Typst 拥有特殊的 [语法]($syntax/#math) 和库函数，用于排版数学公式。
  数学公式可以内嵌于文本中显示，也可以作为单独的块显示。
  如果数学公式以至少一个空格开始和结束（例如 `[$ x^2 $]`），它们将被排版于单独的块中。

  在数学模式中，单独的字母总是原样显示。但是多个字母会被视作变量和函数。
  如果要原样显示多个字母，你可以将它们放入引号中；
  如果要使用单字母变量，你可以使用 [hashtag 语法]($scripting/#expressions)。

  ```example
  $ A = pi r^2 $
  $ "area" = pi dot "radius"^2 $
  $ cal(A) :=
      { x in RR | x "is natural" } $
  #let x = 5
  $ #x < 17 $
  ```

  数学模式提供了大量 [符号]($category/symbols/sym)，例如 `pi`、`dot` 和 `RR`。许多数学符号有不同的变体。
  可以通过对符号应用 [修饰符]($symbol) 来选择不同的变体。
  Typst 还支持识别许多简化过的符号组合，例如 `=>`，它们用于表示一个单独的符号。
  符号文档会列出这些简写的符号组合。

  ```example
  $ x < y => x gt.eq.not y $
  ```
  公式也可以进行换行。每一行可以包含一个或多个 _对齐点_ （`&`），公式会在对齐点处对齐。

  ```example
  $ sum_(k=0)^n k
      &= 1 + ... + n \
      &= (n(n+1)) / 2 $
  ```

  数学模式支持无前缀的特殊函数调用。在这些 “数学函数调用” 中，参数列表的工作方式与在代码中略有不同。

  - 在数学函数调用中，Typst 仍处于 “数学模式” 。因此，你可以直接在其中编写数学公式，但同时需要使用 hashtag 语法来传递代码表达式（字符串除外，它们可以在直接数学模式中使用）。
  - 支持位置参数和命名参数，但不支持尾部内容块和参数展开。
  - 对于二维参数列表，有特殊的额外语法。分号（`;`）会将分号前面用逗号分隔的参数合并为一个数组参数。

  ```example
  $ frac(a^2, 2) $
  $ vec(1, 2, delim: "[") $
  $ mat(1, 2; 3, 4) $
  $ lim_x =
      op("lim", limits: #true)_x $
  ```

  在数学函数调用中，如果要原样输入逗号或者分号，需要在前面加上反斜杠进行转义。如果标识符前面直接跟着冒号，冒号会被特殊处理，因此需要在冒号前面加上一个空格来原样显示它。

  以 hashtag 开头的函数调用是普通的代码函数调用，不受这些规则的影响。

  所有的数学函数都是 `math` [模块]($scripting/#modules)的一部分，它们在公式中默认可用。
  在公式之外，可以通过添加 `math.` 前缀来访问它们。例如要设置公式使用的字体，可以如下实现：

  ```example
  #show math.equation: set text(font: "Fira Math")
  $ sum_(i in NN) 1 + i $
  ```

layout: |
  以不同的方式排列页面上的元素。

  通过使用组合布局函数，你可以创建复杂的自动布局。

visualize: |
  绘图和数据可视化。

  _注：_ 绘图和图标函数尚不可用，未来将会添加该功能。

meta: |
  文档结构、内省和元数据配置。

  在这里，您可以找到用于组织文档并与该结构进行交互的功能。
  这包括节标题和图表、参考文献管理、交叉引用等等。

  此外，该类别还包含 Typst 的内省功能：使用 `counter` 函数，您可以访问和操作页面、节、图表和方程计数器，或创建自定义计数器。
  而 `query` 函数允许您搜索文档中的元素，以构建诸如图表列表或显示当前章节标题的标题等内容。

symbols: |
  这两个模块为符号和表情符号命名，以便您可以轻松地使用普通键盘插入它们。
  或者，您也可以直接将 Unicode 符号输入到您的文本和公式中。
  除了下面列出的符号外，数学模式还定义了 `dif` 和 `Dif`。
  这些不是正常的符号值，因为它们还影响间距和字体样式。

sym: |
  命名的通用符号。

  例如，`#sym.arrow` 会生成 → 符号。在 [公式]($category/math) 中，这些符号可以无需 `#sym.` 前缀。

  在积分的 `dx` 中的 `d` 可以写作 `[$dif x$]`。
  在数学公式之外，可以通过 `math.dif` 访问 `dif`。


emoji: |
  命名的表情符号。

  例如，`#emoji.face` 会生成 😀 表情符号。如果您经常使用某些表情符号，还可以从 `emoji` 模块导入它们（`[#import emoji: face]`），以便在不使用 `#emoji.` 前缀的情况下使用它们。

data-loading: |
  从外部文件加载数据。

  这些函数可以帮助您加载和嵌入数据，例如从实验结果中获取数据。

packages: |
  Typst [包]($scripting/#packages) 封装了可重用的构建模块，并使它们可以跨项目重复使用。
  下面是由社区创建的 Typst 包的列表。由于 Typst 包管理的早期和实验性质，它们都位于 `preview` 命名空间中。
  单击包的名称以查看其文档，并在右侧使用复制按钮获取完整的导入语句。
